package com.tw.mapper;

import com.tw.model.Brand;
import com.tw.model.BrandCriteria.Criteria;
import com.tw.model.BrandCriteria.Criterion;
import com.tw.model.BrandCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class BrandSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String countByExample(BrandCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("twshop_brand");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String deleteByExample(BrandCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("twshop_brand");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String insertSelective(Brand record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("twshop_brand");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.VALUES("name", "#{name,jdbcType=VARCHAR}");
        }
        
        if (record.getListPicUrl() != null) {
            sql.VALUES("list_pic_url", "#{listPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSimpleDesc() != null) {
            sql.VALUES("simple_desc", "#{simpleDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getPicUrl() != null) {
            sql.VALUES("pic_url", "#{picUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSortOrder() != null) {
            sql.VALUES("sort_order", "#{sortOrder,jdbcType=TINYINT}");
        }
        
        if (record.getIsShow() != null) {
            sql.VALUES("is_show", "#{isShow,jdbcType=CHAR}");
        }
        
        if (record.getFloorPrice() != null) {
            sql.VALUES("floor_price", "#{floorPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getAppListPicUrl() != null) {
            sql.VALUES("app_list_pic_url", "#{appListPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getIsNew() != null) {
            sql.VALUES("is_new", "#{isNew,jdbcType=CHAR}");
        }
        
        if (record.getNewPicUrl() != null) {
            sql.VALUES("new_pic_url", "#{newPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getNewSortOrder() != null) {
            sql.VALUES("new_sort_order", "#{newSortOrder,jdbcType=TINYINT}");
        }
        
        if (record.getBrandType() != null) {
            sql.VALUES("brand_Type", "#{brandType,jdbcType=INTEGER}");
        }
        
        if (record.getAddr() != null) {
            sql.VALUES("addr", "#{addr,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.VALUES("user_id", "#{userId,jdbcType=INTEGER}");
        }
        
        if (record.getMaxDiscount() != null) {
            sql.VALUES("max_Discount", "#{maxDiscount,jdbcType=INTEGER}");
        }
        
        if (record.getSumDiscount() != null) {
            sql.VALUES("sum_Discount", "#{sumDiscount,jdbcType=DECIMAL}");
        }
        
        if (record.getLogo() != null) {
            sql.VALUES("logo", "#{logo,jdbcType=VARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String selectByExample(BrandCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("name");
        sql.SELECT("list_pic_url");
        sql.SELECT("simple_desc");
        sql.SELECT("pic_url");
        sql.SELECT("sort_order");
        sql.SELECT("is_show");
        sql.SELECT("floor_price");
        sql.SELECT("app_list_pic_url");
        sql.SELECT("is_new");
        sql.SELECT("new_pic_url");
        sql.SELECT("new_sort_order");
        sql.SELECT("brand_Type");
        sql.SELECT("addr");
        sql.SELECT("user_id");
        sql.SELECT("max_Discount");
        sql.SELECT("sum_Discount");
        sql.SELECT("logo");
        sql.FROM("twshop_brand");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Brand record = (Brand) parameter.get("record");
        BrandCriteria example = (BrandCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("twshop_brand");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getName() != null) {
            sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        }
        
        if (record.getListPicUrl() != null) {
            sql.SET("list_pic_url = #{record.listPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSimpleDesc() != null) {
            sql.SET("simple_desc = #{record.simpleDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getPicUrl() != null) {
            sql.SET("pic_url = #{record.picUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSortOrder() != null) {
            sql.SET("sort_order = #{record.sortOrder,jdbcType=TINYINT}");
        }
        
        if (record.getIsShow() != null) {
            sql.SET("is_show = #{record.isShow,jdbcType=CHAR}");
        }
        
        if (record.getFloorPrice() != null) {
            sql.SET("floor_price = #{record.floorPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getAppListPicUrl() != null) {
            sql.SET("app_list_pic_url = #{record.appListPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getIsNew() != null) {
            sql.SET("is_new = #{record.isNew,jdbcType=CHAR}");
        }
        
        if (record.getNewPicUrl() != null) {
            sql.SET("new_pic_url = #{record.newPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getNewSortOrder() != null) {
            sql.SET("new_sort_order = #{record.newSortOrder,jdbcType=TINYINT}");
        }
        
        if (record.getBrandType() != null) {
            sql.SET("brand_Type = #{record.brandType,jdbcType=INTEGER}");
        }
        
        if (record.getAddr() != null) {
            sql.SET("addr = #{record.addr,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{record.userId,jdbcType=INTEGER}");
        }
        
        if (record.getMaxDiscount() != null) {
            sql.SET("max_Discount = #{record.maxDiscount,jdbcType=INTEGER}");
        }
        
        if (record.getSumDiscount() != null) {
            sql.SET("sum_Discount = #{record.sumDiscount,jdbcType=DECIMAL}");
        }
        
        if (record.getLogo() != null) {
            sql.SET("logo = #{record.logo,jdbcType=VARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_brand");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("name = #{record.name,jdbcType=VARCHAR}");
        sql.SET("list_pic_url = #{record.listPicUrl,jdbcType=VARCHAR}");
        sql.SET("simple_desc = #{record.simpleDesc,jdbcType=VARCHAR}");
        sql.SET("pic_url = #{record.picUrl,jdbcType=VARCHAR}");
        sql.SET("sort_order = #{record.sortOrder,jdbcType=TINYINT}");
        sql.SET("is_show = #{record.isShow,jdbcType=CHAR}");
        sql.SET("floor_price = #{record.floorPrice,jdbcType=DECIMAL}");
        sql.SET("app_list_pic_url = #{record.appListPicUrl,jdbcType=VARCHAR}");
        sql.SET("is_new = #{record.isNew,jdbcType=CHAR}");
        sql.SET("new_pic_url = #{record.newPicUrl,jdbcType=VARCHAR}");
        sql.SET("new_sort_order = #{record.newSortOrder,jdbcType=TINYINT}");
        sql.SET("brand_Type = #{record.brandType,jdbcType=INTEGER}");
        sql.SET("addr = #{record.addr,jdbcType=VARCHAR}");
        sql.SET("user_id = #{record.userId,jdbcType=INTEGER}");
        sql.SET("max_Discount = #{record.maxDiscount,jdbcType=INTEGER}");
        sql.SET("sum_Discount = #{record.sumDiscount,jdbcType=DECIMAL}");
        sql.SET("logo = #{record.logo,jdbcType=VARCHAR}");
        
        BrandCriteria example = (BrandCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(Brand record) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_brand");
        
        if (record.getName() != null) {
            sql.SET("name = #{name,jdbcType=VARCHAR}");
        }
        
        if (record.getListPicUrl() != null) {
            sql.SET("list_pic_url = #{listPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSimpleDesc() != null) {
            sql.SET("simple_desc = #{simpleDesc,jdbcType=VARCHAR}");
        }
        
        if (record.getPicUrl() != null) {
            sql.SET("pic_url = #{picUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSortOrder() != null) {
            sql.SET("sort_order = #{sortOrder,jdbcType=TINYINT}");
        }
        
        if (record.getIsShow() != null) {
            sql.SET("is_show = #{isShow,jdbcType=CHAR}");
        }
        
        if (record.getFloorPrice() != null) {
            sql.SET("floor_price = #{floorPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getAppListPicUrl() != null) {
            sql.SET("app_list_pic_url = #{appListPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getIsNew() != null) {
            sql.SET("is_new = #{isNew,jdbcType=CHAR}");
        }
        
        if (record.getNewPicUrl() != null) {
            sql.SET("new_pic_url = #{newPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getNewSortOrder() != null) {
            sql.SET("new_sort_order = #{newSortOrder,jdbcType=TINYINT}");
        }
        
        if (record.getBrandType() != null) {
            sql.SET("brand_Type = #{brandType,jdbcType=INTEGER}");
        }
        
        if (record.getAddr() != null) {
            sql.SET("addr = #{addr,jdbcType=VARCHAR}");
        }
        
        if (record.getUserId() != null) {
            sql.SET("user_id = #{userId,jdbcType=INTEGER}");
        }
        
        if (record.getMaxDiscount() != null) {
            sql.SET("max_Discount = #{maxDiscount,jdbcType=INTEGER}");
        }
        
        if (record.getSumDiscount() != null) {
            sql.SET("sum_Discount = #{sumDiscount,jdbcType=DECIMAL}");
        }
        
        if (record.getLogo() != null) {
            sql.SET("logo = #{logo,jdbcType=VARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_brand
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, BrandCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}