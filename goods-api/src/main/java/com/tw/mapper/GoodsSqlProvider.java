package com.tw.mapper;

import com.tw.model.Goods;
import com.tw.model.GoodsCriteria.Criteria;
import com.tw.model.GoodsCriteria.Criterion;
import com.tw.model.GoodsCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class GoodsSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String countByExample(GoodsCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("twshop_goods");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String deleteByExample(GoodsCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("twshop_goods");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String insertSelective(Goods record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("twshop_goods");
        
        if (record.getGoodsId() != null) {
            sql.VALUES("goods_id", "#{goodsId,jdbcType=VARCHAR}");
        }
        
        if (record.getFirstCatId() != null) {
            sql.VALUES("first_cat_id", "#{firstCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getSecondCatId() != null) {
            sql.VALUES("second_cat_id", "#{secondCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getThirdCatId() != null) {
            sql.VALUES("third_cat_id", "#{thirdCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getSupplierId() != null) {
            sql.VALUES("supplier_id", "#{supplierId,jdbcType=VARCHAR}");
        }
        
        if (record.getSupplierName() != null) {
            sql.VALUES("supplier_name", "#{supplierName,jdbcType=VARCHAR}");
        }
        
        if (record.getTemplateId() != null) {
            sql.VALUES("template_id", "#{templateId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsName() != null) {
            sql.VALUES("goods_name", "#{goodsName,jdbcType=VARCHAR}");
        }
        
        if (record.getJingle() != null) {
            sql.VALUES("jingle", "#{jingle,jdbcType=VARCHAR}");
        }
        
        if (record.getRealSaleNum() != null) {
            sql.VALUES("real_sale_num", "#{realSaleNum,jdbcType=BIGINT}");
        }
        
        if (record.getShamSaleNum() != null) {
            sql.VALUES("sham_sale_num", "#{shamSaleNum,jdbcType=BIGINT}");
        }
        
        if (record.getOnlineStatus() != null) {
            sql.VALUES("online_status", "#{onlineStatus,jdbcType=CHAR}");
        }
        
        if (record.getSingleStatus() != null) {
            sql.VALUES("single_status", "#{singleStatus,jdbcType=CHAR}");
        }
        
        if (record.getStorageNum() != null) {
            sql.VALUES("storage_num", "#{storageNum,jdbcType=INTEGER}");
        }
        
        if (record.getFavNum() != null) {
            sql.VALUES("fav_num", "#{favNum,jdbcType=INTEGER}");
        }
        
        if (record.getLabelPrice() != null) {
            sql.VALUES("label_price", "#{labelPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getMarketPrice() != null) {
            sql.VALUES("market_price", "#{marketPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getCostPrice() != null) {
            sql.VALUES("cost_price", "#{costPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsImg() != null) {
            sql.VALUES("goods_img", "#{goodsImg,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsCode() != null) {
            sql.VALUES("goods_code", "#{goodsCode,jdbcType=VARCHAR}");
        }
        
        if (record.getWeight() != null) {
            sql.VALUES("weight", "#{weight,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsType() != null) {
            sql.VALUES("goods_type", "#{goodsType,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.VALUES("remark", "#{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getVideoUrl() != null) {
            sql.VALUES("video_url", "#{videoUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getVideoName() != null) {
            sql.VALUES("video_name", "#{videoName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoverName() != null) {
            sql.VALUES("cover_name", "#{coverName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoverUrl() != null) {
            sql.VALUES("cover_url", "#{coverUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getFileId() != null) {
            sql.VALUES("file_id", "#{fileId,jdbcType=VARCHAR}");
        }
        
        if (record.getBrandId() != null) {
            sql.VALUES("brand_id", "#{brandId,jdbcType=VARCHAR}");
        }
        
        if (record.getColumnId() != null) {
            sql.VALUES("column_id", "#{columnId,jdbcType=VARCHAR}");
        }
        
        if (record.getQrcodeUrl() != null) {
            sql.VALUES("qrcode_url", "#{qrcodeUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSort() != null) {
            sql.VALUES("sort", "#{sort,jdbcType=BIGINT}");
        }
        
        if (record.getSkuKeyValue() != null) {
            sql.VALUES("sku_key_value", "#{skuKeyValue,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.VALUES("create_time", "#{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.VALUES("update_time", "#{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getKeywords() != null) {
            sql.VALUES("keywords", "#{keywords,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsBrief() != null) {
            sql.VALUES("goods_brief", "#{goodsBrief,jdbcType=VARCHAR}");
        }
        
        if (record.getHotStatus() != null) {
            sql.VALUES("hot_status", "#{hotStatus,jdbcType=CHAR}");
        }
        
        if (record.getGoodsDesc() != null) {
            sql.VALUES("goods_desc", "#{goodsDesc,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(GoodsCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("goods_id");
        } else {
            sql.SELECT("goods_id");
        }
        sql.SELECT("first_cat_id");
        sql.SELECT("second_cat_id");
        sql.SELECT("third_cat_id");
        sql.SELECT("supplier_id");
        sql.SELECT("supplier_name");
        sql.SELECT("template_id");
        sql.SELECT("goods_name");
        sql.SELECT("jingle");
        sql.SELECT("real_sale_num");
        sql.SELECT("sham_sale_num");
        sql.SELECT("online_status");
        sql.SELECT("single_status");
        sql.SELECT("storage_num");
        sql.SELECT("fav_num");
        sql.SELECT("label_price");
        sql.SELECT("market_price");
        sql.SELECT("cost_price");
        sql.SELECT("goods_img");
        sql.SELECT("goods_code");
        sql.SELECT("weight");
        sql.SELECT("goods_type");
        sql.SELECT("remark");
        sql.SELECT("video_url");
        sql.SELECT("video_name");
        sql.SELECT("cover_name");
        sql.SELECT("cover_url");
        sql.SELECT("file_id");
        sql.SELECT("brand_id");
        sql.SELECT("column_id");
        sql.SELECT("qrcode_url");
        sql.SELECT("sort");
        sql.SELECT("sku_key_value");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("keywords");
        sql.SELECT("goods_brief");
        sql.SELECT("hot_status");
        sql.SELECT("goods_desc");
        sql.FROM("twshop_goods");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String selectByExample(GoodsCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("goods_id");
        } else {
            sql.SELECT("goods_id");
        }
        sql.SELECT("first_cat_id");
        sql.SELECT("second_cat_id");
        sql.SELECT("third_cat_id");
        sql.SELECT("supplier_id");
        sql.SELECT("supplier_name");
        sql.SELECT("template_id");
        sql.SELECT("goods_name");
        sql.SELECT("jingle");
        sql.SELECT("real_sale_num");
        sql.SELECT("sham_sale_num");
        sql.SELECT("online_status");
        sql.SELECT("single_status");
        sql.SELECT("storage_num");
        sql.SELECT("fav_num");
        sql.SELECT("label_price");
        sql.SELECT("market_price");
        sql.SELECT("cost_price");
        sql.SELECT("goods_img");
        sql.SELECT("goods_code");
        sql.SELECT("weight");
        sql.SELECT("goods_type");
        sql.SELECT("remark");
        sql.SELECT("video_url");
        sql.SELECT("video_name");
        sql.SELECT("cover_name");
        sql.SELECT("cover_url");
        sql.SELECT("file_id");
        sql.SELECT("brand_id");
        sql.SELECT("column_id");
        sql.SELECT("qrcode_url");
        sql.SELECT("sort");
        sql.SELECT("sku_key_value");
        sql.SELECT("create_time");
        sql.SELECT("update_time");
        sql.SELECT("keywords");
        sql.SELECT("goods_brief");
        sql.SELECT("hot_status");
        sql.FROM("twshop_goods");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        Goods record = (Goods) parameter.get("record");
        GoodsCriteria example = (GoodsCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("twshop_goods");
        
        if (record.getGoodsId() != null) {
            sql.SET("goods_id = #{record.goodsId,jdbcType=VARCHAR}");
        }
        
        if (record.getFirstCatId() != null) {
            sql.SET("first_cat_id = #{record.firstCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getSecondCatId() != null) {
            sql.SET("second_cat_id = #{record.secondCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getThirdCatId() != null) {
            sql.SET("third_cat_id = #{record.thirdCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getSupplierId() != null) {
            sql.SET("supplier_id = #{record.supplierId,jdbcType=VARCHAR}");
        }
        
        if (record.getSupplierName() != null) {
            sql.SET("supplier_name = #{record.supplierName,jdbcType=VARCHAR}");
        }
        
        if (record.getTemplateId() != null) {
            sql.SET("template_id = #{record.templateId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsName() != null) {
            sql.SET("goods_name = #{record.goodsName,jdbcType=VARCHAR}");
        }
        
        if (record.getJingle() != null) {
            sql.SET("jingle = #{record.jingle,jdbcType=VARCHAR}");
        }
        
        if (record.getRealSaleNum() != null) {
            sql.SET("real_sale_num = #{record.realSaleNum,jdbcType=BIGINT}");
        }
        
        if (record.getShamSaleNum() != null) {
            sql.SET("sham_sale_num = #{record.shamSaleNum,jdbcType=BIGINT}");
        }
        
        if (record.getOnlineStatus() != null) {
            sql.SET("online_status = #{record.onlineStatus,jdbcType=CHAR}");
        }
        
        if (record.getSingleStatus() != null) {
            sql.SET("single_status = #{record.singleStatus,jdbcType=CHAR}");
        }
        
        if (record.getStorageNum() != null) {
            sql.SET("storage_num = #{record.storageNum,jdbcType=INTEGER}");
        }
        
        if (record.getFavNum() != null) {
            sql.SET("fav_num = #{record.favNum,jdbcType=INTEGER}");
        }
        
        if (record.getLabelPrice() != null) {
            sql.SET("label_price = #{record.labelPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getMarketPrice() != null) {
            sql.SET("market_price = #{record.marketPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getCostPrice() != null) {
            sql.SET("cost_price = #{record.costPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsImg() != null) {
            sql.SET("goods_img = #{record.goodsImg,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsCode() != null) {
            sql.SET("goods_code = #{record.goodsCode,jdbcType=VARCHAR}");
        }
        
        if (record.getWeight() != null) {
            sql.SET("weight = #{record.weight,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsType() != null) {
            sql.SET("goods_type = #{record.goodsType,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        }
        
        if (record.getVideoUrl() != null) {
            sql.SET("video_url = #{record.videoUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getVideoName() != null) {
            sql.SET("video_name = #{record.videoName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoverName() != null) {
            sql.SET("cover_name = #{record.coverName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoverUrl() != null) {
            sql.SET("cover_url = #{record.coverUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getFileId() != null) {
            sql.SET("file_id = #{record.fileId,jdbcType=VARCHAR}");
        }
        
        if (record.getBrandId() != null) {
            sql.SET("brand_id = #{record.brandId,jdbcType=VARCHAR}");
        }
        
        if (record.getColumnId() != null) {
            sql.SET("column_id = #{record.columnId,jdbcType=VARCHAR}");
        }
        
        if (record.getQrcodeUrl() != null) {
            sql.SET("qrcode_url = #{record.qrcodeUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSort() != null) {
            sql.SET("sort = #{record.sort,jdbcType=BIGINT}");
        }
        
        if (record.getSkuKeyValue() != null) {
            sql.SET("sku_key_value = #{record.skuKeyValue,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getKeywords() != null) {
            sql.SET("keywords = #{record.keywords,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsBrief() != null) {
            sql.SET("goods_brief = #{record.goodsBrief,jdbcType=VARCHAR}");
        }
        
        if (record.getHotStatus() != null) {
            sql.SET("hot_status = #{record.hotStatus,jdbcType=CHAR}");
        }
        
        if (record.getGoodsDesc() != null) {
            sql.SET("goods_desc = #{record.goodsDesc,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_goods");
        
        sql.SET("goods_id = #{record.goodsId,jdbcType=VARCHAR}");
        sql.SET("first_cat_id = #{record.firstCatId,jdbcType=VARCHAR}");
        sql.SET("second_cat_id = #{record.secondCatId,jdbcType=VARCHAR}");
        sql.SET("third_cat_id = #{record.thirdCatId,jdbcType=VARCHAR}");
        sql.SET("supplier_id = #{record.supplierId,jdbcType=VARCHAR}");
        sql.SET("supplier_name = #{record.supplierName,jdbcType=VARCHAR}");
        sql.SET("template_id = #{record.templateId,jdbcType=VARCHAR}");
        sql.SET("goods_name = #{record.goodsName,jdbcType=VARCHAR}");
        sql.SET("jingle = #{record.jingle,jdbcType=VARCHAR}");
        sql.SET("real_sale_num = #{record.realSaleNum,jdbcType=BIGINT}");
        sql.SET("sham_sale_num = #{record.shamSaleNum,jdbcType=BIGINT}");
        sql.SET("online_status = #{record.onlineStatus,jdbcType=CHAR}");
        sql.SET("single_status = #{record.singleStatus,jdbcType=CHAR}");
        sql.SET("storage_num = #{record.storageNum,jdbcType=INTEGER}");
        sql.SET("fav_num = #{record.favNum,jdbcType=INTEGER}");
        sql.SET("label_price = #{record.labelPrice,jdbcType=DECIMAL}");
        sql.SET("market_price = #{record.marketPrice,jdbcType=DECIMAL}");
        sql.SET("cost_price = #{record.costPrice,jdbcType=DECIMAL}");
        sql.SET("goods_img = #{record.goodsImg,jdbcType=VARCHAR}");
        sql.SET("goods_code = #{record.goodsCode,jdbcType=VARCHAR}");
        sql.SET("weight = #{record.weight,jdbcType=DECIMAL}");
        sql.SET("goods_type = #{record.goodsType,jdbcType=VARCHAR}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("video_url = #{record.videoUrl,jdbcType=VARCHAR}");
        sql.SET("video_name = #{record.videoName,jdbcType=VARCHAR}");
        sql.SET("cover_name = #{record.coverName,jdbcType=VARCHAR}");
        sql.SET("cover_url = #{record.coverUrl,jdbcType=VARCHAR}");
        sql.SET("file_id = #{record.fileId,jdbcType=VARCHAR}");
        sql.SET("brand_id = #{record.brandId,jdbcType=VARCHAR}");
        sql.SET("column_id = #{record.columnId,jdbcType=VARCHAR}");
        sql.SET("qrcode_url = #{record.qrcodeUrl,jdbcType=VARCHAR}");
        sql.SET("sort = #{record.sort,jdbcType=BIGINT}");
        sql.SET("sku_key_value = #{record.skuKeyValue,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("keywords = #{record.keywords,jdbcType=VARCHAR}");
        sql.SET("goods_brief = #{record.goodsBrief,jdbcType=VARCHAR}");
        sql.SET("hot_status = #{record.hotStatus,jdbcType=CHAR}");
        sql.SET("goods_desc = #{record.goodsDesc,jdbcType=LONGVARCHAR}");
        
        GoodsCriteria example = (GoodsCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_goods");
        
        sql.SET("goods_id = #{record.goodsId,jdbcType=VARCHAR}");
        sql.SET("first_cat_id = #{record.firstCatId,jdbcType=VARCHAR}");
        sql.SET("second_cat_id = #{record.secondCatId,jdbcType=VARCHAR}");
        sql.SET("third_cat_id = #{record.thirdCatId,jdbcType=VARCHAR}");
        sql.SET("supplier_id = #{record.supplierId,jdbcType=VARCHAR}");
        sql.SET("supplier_name = #{record.supplierName,jdbcType=VARCHAR}");
        sql.SET("template_id = #{record.templateId,jdbcType=VARCHAR}");
        sql.SET("goods_name = #{record.goodsName,jdbcType=VARCHAR}");
        sql.SET("jingle = #{record.jingle,jdbcType=VARCHAR}");
        sql.SET("real_sale_num = #{record.realSaleNum,jdbcType=BIGINT}");
        sql.SET("sham_sale_num = #{record.shamSaleNum,jdbcType=BIGINT}");
        sql.SET("online_status = #{record.onlineStatus,jdbcType=CHAR}");
        sql.SET("single_status = #{record.singleStatus,jdbcType=CHAR}");
        sql.SET("storage_num = #{record.storageNum,jdbcType=INTEGER}");
        sql.SET("fav_num = #{record.favNum,jdbcType=INTEGER}");
        sql.SET("label_price = #{record.labelPrice,jdbcType=DECIMAL}");
        sql.SET("market_price = #{record.marketPrice,jdbcType=DECIMAL}");
        sql.SET("cost_price = #{record.costPrice,jdbcType=DECIMAL}");
        sql.SET("goods_img = #{record.goodsImg,jdbcType=VARCHAR}");
        sql.SET("goods_code = #{record.goodsCode,jdbcType=VARCHAR}");
        sql.SET("weight = #{record.weight,jdbcType=DECIMAL}");
        sql.SET("goods_type = #{record.goodsType,jdbcType=VARCHAR}");
        sql.SET("remark = #{record.remark,jdbcType=VARCHAR}");
        sql.SET("video_url = #{record.videoUrl,jdbcType=VARCHAR}");
        sql.SET("video_name = #{record.videoName,jdbcType=VARCHAR}");
        sql.SET("cover_name = #{record.coverName,jdbcType=VARCHAR}");
        sql.SET("cover_url = #{record.coverUrl,jdbcType=VARCHAR}");
        sql.SET("file_id = #{record.fileId,jdbcType=VARCHAR}");
        sql.SET("brand_id = #{record.brandId,jdbcType=VARCHAR}");
        sql.SET("column_id = #{record.columnId,jdbcType=VARCHAR}");
        sql.SET("qrcode_url = #{record.qrcodeUrl,jdbcType=VARCHAR}");
        sql.SET("sort = #{record.sort,jdbcType=BIGINT}");
        sql.SET("sku_key_value = #{record.skuKeyValue,jdbcType=VARCHAR}");
        sql.SET("create_time = #{record.createTime,jdbcType=TIMESTAMP}");
        sql.SET("update_time = #{record.updateTime,jdbcType=TIMESTAMP}");
        sql.SET("keywords = #{record.keywords,jdbcType=VARCHAR}");
        sql.SET("goods_brief = #{record.goodsBrief,jdbcType=VARCHAR}");
        sql.SET("hot_status = #{record.hotStatus,jdbcType=CHAR}");
        
        GoodsCriteria example = (GoodsCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(Goods record) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_goods");
        
        if (record.getFirstCatId() != null) {
            sql.SET("first_cat_id = #{firstCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getSecondCatId() != null) {
            sql.SET("second_cat_id = #{secondCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getThirdCatId() != null) {
            sql.SET("third_cat_id = #{thirdCatId,jdbcType=VARCHAR}");
        }
        
        if (record.getSupplierId() != null) {
            sql.SET("supplier_id = #{supplierId,jdbcType=VARCHAR}");
        }
        
        if (record.getSupplierName() != null) {
            sql.SET("supplier_name = #{supplierName,jdbcType=VARCHAR}");
        }
        
        if (record.getTemplateId() != null) {
            sql.SET("template_id = #{templateId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsName() != null) {
            sql.SET("goods_name = #{goodsName,jdbcType=VARCHAR}");
        }
        
        if (record.getJingle() != null) {
            sql.SET("jingle = #{jingle,jdbcType=VARCHAR}");
        }
        
        if (record.getRealSaleNum() != null) {
            sql.SET("real_sale_num = #{realSaleNum,jdbcType=BIGINT}");
        }
        
        if (record.getShamSaleNum() != null) {
            sql.SET("sham_sale_num = #{shamSaleNum,jdbcType=BIGINT}");
        }
        
        if (record.getOnlineStatus() != null) {
            sql.SET("online_status = #{onlineStatus,jdbcType=CHAR}");
        }
        
        if (record.getSingleStatus() != null) {
            sql.SET("single_status = #{singleStatus,jdbcType=CHAR}");
        }
        
        if (record.getStorageNum() != null) {
            sql.SET("storage_num = #{storageNum,jdbcType=INTEGER}");
        }
        
        if (record.getFavNum() != null) {
            sql.SET("fav_num = #{favNum,jdbcType=INTEGER}");
        }
        
        if (record.getLabelPrice() != null) {
            sql.SET("label_price = #{labelPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getMarketPrice() != null) {
            sql.SET("market_price = #{marketPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getCostPrice() != null) {
            sql.SET("cost_price = #{costPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsImg() != null) {
            sql.SET("goods_img = #{goodsImg,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsCode() != null) {
            sql.SET("goods_code = #{goodsCode,jdbcType=VARCHAR}");
        }
        
        if (record.getWeight() != null) {
            sql.SET("weight = #{weight,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsType() != null) {
            sql.SET("goods_type = #{goodsType,jdbcType=VARCHAR}");
        }
        
        if (record.getRemark() != null) {
            sql.SET("remark = #{remark,jdbcType=VARCHAR}");
        }
        
        if (record.getVideoUrl() != null) {
            sql.SET("video_url = #{videoUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getVideoName() != null) {
            sql.SET("video_name = #{videoName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoverName() != null) {
            sql.SET("cover_name = #{coverName,jdbcType=VARCHAR}");
        }
        
        if (record.getCoverUrl() != null) {
            sql.SET("cover_url = #{coverUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getFileId() != null) {
            sql.SET("file_id = #{fileId,jdbcType=VARCHAR}");
        }
        
        if (record.getBrandId() != null) {
            sql.SET("brand_id = #{brandId,jdbcType=VARCHAR}");
        }
        
        if (record.getColumnId() != null) {
            sql.SET("column_id = #{columnId,jdbcType=VARCHAR}");
        }
        
        if (record.getQrcodeUrl() != null) {
            sql.SET("qrcode_url = #{qrcodeUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getSort() != null) {
            sql.SET("sort = #{sort,jdbcType=BIGINT}");
        }
        
        if (record.getSkuKeyValue() != null) {
            sql.SET("sku_key_value = #{skuKeyValue,jdbcType=VARCHAR}");
        }
        
        if (record.getCreateTime() != null) {
            sql.SET("create_time = #{createTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getUpdateTime() != null) {
            sql.SET("update_time = #{updateTime,jdbcType=TIMESTAMP}");
        }
        
        if (record.getKeywords() != null) {
            sql.SET("keywords = #{keywords,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsBrief() != null) {
            sql.SET("goods_brief = #{goodsBrief,jdbcType=VARCHAR}");
        }
        
        if (record.getHotStatus() != null) {
            sql.SET("hot_status = #{hotStatus,jdbcType=CHAR}");
        }
        
        if (record.getGoodsDesc() != null) {
            sql.SET("goods_desc = #{goodsDesc,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("goods_id = #{goodsId,jdbcType=VARCHAR}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_goods
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, GoodsCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}