package com.tw.mapper;

import com.tw.model.OrderGoods;
import com.tw.model.OrderGoodsCriteria.Criteria;
import com.tw.model.OrderGoodsCriteria.Criterion;
import com.tw.model.OrderGoodsCriteria;
import java.util.List;
import java.util.Map;
import org.apache.ibatis.jdbc.SQL;

public class OrderGoodsSqlProvider {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String countByExample(OrderGoodsCriteria example) {
        SQL sql = new SQL();
        sql.SELECT("count(*)").FROM("twshop_order_goods");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String deleteByExample(OrderGoodsCriteria example) {
        SQL sql = new SQL();
        sql.DELETE_FROM("twshop_order_goods");
        applyWhere(sql, example, false);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String insertSelective(OrderGoods record) {
        SQL sql = new SQL();
        sql.INSERT_INTO("twshop_order_goods");
        
        if (record.getId() != null) {
            sql.VALUES("id", "#{id,jdbcType=INTEGER}");
        }
        
        if (record.getOrderId() != null) {
            sql.VALUES("order_id", "#{orderId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsId() != null) {
            sql.VALUES("goods_id", "#{goodsId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsName() != null) {
            sql.VALUES("goods_name", "#{goodsName,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsSn() != null) {
            sql.VALUES("goods_sn", "#{goodsSn,jdbcType=VARCHAR}");
        }
        
        if (record.getProductId() != null) {
            sql.VALUES("product_id", "#{productId,jdbcType=VARCHAR}");
        }
        
        if (record.getNumber() != null) {
            sql.VALUES("number", "#{number,jdbcType=INTEGER}");
        }
        
        if (record.getMarketPrice() != null) {
            sql.VALUES("market_price", "#{marketPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getRetailPrice() != null) {
            sql.VALUES("retail_price", "#{retailPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getIsReal() != null) {
            sql.VALUES("is_real", "#{isReal,jdbcType=BIT}");
        }
        
        if (record.getGoodsSpecifitionIds() != null) {
            sql.VALUES("goods_specifition_ids", "#{goodsSpecifitionIds,jdbcType=VARCHAR}");
        }
        
        if (record.getListPicUrl() != null) {
            sql.VALUES("list_pic_url", "#{listPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getBrandId() != null) {
            sql.VALUES("brand_id", "#{brandId,jdbcType=INTEGER}");
        }
        
        if (record.getCustomers() != null) {
            sql.VALUES("customers", "#{customers,jdbcType=VARCHAR}");
        }
        
        if (record.getCustomersName() != null) {
            sql.VALUES("customers_name", "#{customersName,jdbcType=VARCHAR}");
        }
        
        if (record.getCountry() != null) {
            sql.VALUES("country", "#{country,jdbcType=VARCHAR}");
        }
        
        if (record.getProvince() != null) {
            sql.VALUES("province", "#{province,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.VALUES("city", "#{city,jdbcType=VARCHAR}");
        }
        
        if (record.getDistrict() != null) {
            sql.VALUES("district", "#{district,jdbcType=VARCHAR}");
        }
        
        if (record.getAddress() != null) {
            sql.VALUES("address", "#{address,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.VALUES("mobile", "#{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getConsignee() != null) {
            sql.VALUES("consignee", "#{consignee,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingId() != null) {
            sql.VALUES("shipping_id", "#{shippingId,jdbcType=TINYINT}");
        }
        
        if (record.getShippingName() != null) {
            sql.VALUES("shipping_name", "#{shippingName,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingNo() != null) {
            sql.VALUES("shipping_no", "#{shippingNo,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingStatus() != null) {
            sql.VALUES("shipping_status", "#{shippingStatus,jdbcType=INTEGER}");
        }
        
        if (record.getOrderPrice() != null) {
            sql.VALUES("order_price", "#{orderPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsPrice() != null) {
            sql.VALUES("goods_price", "#{goodsPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getActualPrice() != null) {
            sql.VALUES("actual_price", "#{actualPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsSpecifitionNameValue() != null) {
            sql.VALUES("goods_specifition_name_value", "#{goodsSpecifitionNameValue,jdbcType=LONGVARCHAR}");
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String selectByExampleWithBLOBs(OrderGoodsCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("order_id");
        sql.SELECT("goods_id");
        sql.SELECT("goods_name");
        sql.SELECT("goods_sn");
        sql.SELECT("product_id");
        sql.SELECT("number");
        sql.SELECT("market_price");
        sql.SELECT("retail_price");
        sql.SELECT("is_real");
        sql.SELECT("goods_specifition_ids");
        sql.SELECT("list_pic_url");
        sql.SELECT("brand_id");
        sql.SELECT("customers");
        sql.SELECT("customers_name");
        sql.SELECT("country");
        sql.SELECT("province");
        sql.SELECT("city");
        sql.SELECT("district");
        sql.SELECT("address");
        sql.SELECT("mobile");
        sql.SELECT("consignee");
        sql.SELECT("shipping_id");
        sql.SELECT("shipping_name");
        sql.SELECT("shipping_no");
        sql.SELECT("shipping_status");
        sql.SELECT("order_price");
        sql.SELECT("goods_price");
        sql.SELECT("actual_price");
        sql.SELECT("goods_specifition_name_value");
        sql.FROM("twshop_order_goods");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String selectByExample(OrderGoodsCriteria example) {
        SQL sql = new SQL();
        if (example != null && example.isDistinct()) {
            sql.SELECT_DISTINCT("id");
        } else {
            sql.SELECT("id");
        }
        sql.SELECT("order_id");
        sql.SELECT("goods_id");
        sql.SELECT("goods_name");
        sql.SELECT("goods_sn");
        sql.SELECT("product_id");
        sql.SELECT("number");
        sql.SELECT("market_price");
        sql.SELECT("retail_price");
        sql.SELECT("is_real");
        sql.SELECT("goods_specifition_ids");
        sql.SELECT("list_pic_url");
        sql.SELECT("brand_id");
        sql.SELECT("customers");
        sql.SELECT("customers_name");
        sql.SELECT("country");
        sql.SELECT("province");
        sql.SELECT("city");
        sql.SELECT("district");
        sql.SELECT("address");
        sql.SELECT("mobile");
        sql.SELECT("consignee");
        sql.SELECT("shipping_id");
        sql.SELECT("shipping_name");
        sql.SELECT("shipping_no");
        sql.SELECT("shipping_status");
        sql.SELECT("order_price");
        sql.SELECT("goods_price");
        sql.SELECT("actual_price");
        sql.FROM("twshop_order_goods");
        applyWhere(sql, example, false);
        
        if (example != null && example.getOrderByClause() != null) {
            sql.ORDER_BY(example.getOrderByClause());
        }
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String updateByExampleSelective(Map<String, Object> parameter) {
        OrderGoods record = (OrderGoods) parameter.get("record");
        OrderGoodsCriteria example = (OrderGoodsCriteria) parameter.get("example");
        
        SQL sql = new SQL();
        sql.UPDATE("twshop_order_goods");
        
        if (record.getId() != null) {
            sql.SET("id = #{record.id,jdbcType=INTEGER}");
        }
        
        if (record.getOrderId() != null) {
            sql.SET("order_id = #{record.orderId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsId() != null) {
            sql.SET("goods_id = #{record.goodsId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsName() != null) {
            sql.SET("goods_name = #{record.goodsName,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsSn() != null) {
            sql.SET("goods_sn = #{record.goodsSn,jdbcType=VARCHAR}");
        }
        
        if (record.getProductId() != null) {
            sql.SET("product_id = #{record.productId,jdbcType=VARCHAR}");
        }
        
        if (record.getNumber() != null) {
            sql.SET("number = #{record.number,jdbcType=INTEGER}");
        }
        
        if (record.getMarketPrice() != null) {
            sql.SET("market_price = #{record.marketPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getRetailPrice() != null) {
            sql.SET("retail_price = #{record.retailPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getIsReal() != null) {
            sql.SET("is_real = #{record.isReal,jdbcType=BIT}");
        }
        
        if (record.getGoodsSpecifitionIds() != null) {
            sql.SET("goods_specifition_ids = #{record.goodsSpecifitionIds,jdbcType=VARCHAR}");
        }
        
        if (record.getListPicUrl() != null) {
            sql.SET("list_pic_url = #{record.listPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getBrandId() != null) {
            sql.SET("brand_id = #{record.brandId,jdbcType=INTEGER}");
        }
        
        if (record.getCustomers() != null) {
            sql.SET("customers = #{record.customers,jdbcType=VARCHAR}");
        }
        
        if (record.getCustomersName() != null) {
            sql.SET("customers_name = #{record.customersName,jdbcType=VARCHAR}");
        }
        
        if (record.getCountry() != null) {
            sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        }
        
        if (record.getProvince() != null) {
            sql.SET("province = #{record.province,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        }
        
        if (record.getDistrict() != null) {
            sql.SET("district = #{record.district,jdbcType=VARCHAR}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("mobile = #{record.mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getConsignee() != null) {
            sql.SET("consignee = #{record.consignee,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingId() != null) {
            sql.SET("shipping_id = #{record.shippingId,jdbcType=TINYINT}");
        }
        
        if (record.getShippingName() != null) {
            sql.SET("shipping_name = #{record.shippingName,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingNo() != null) {
            sql.SET("shipping_no = #{record.shippingNo,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingStatus() != null) {
            sql.SET("shipping_status = #{record.shippingStatus,jdbcType=INTEGER}");
        }
        
        if (record.getOrderPrice() != null) {
            sql.SET("order_price = #{record.orderPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsPrice() != null) {
            sql.SET("goods_price = #{record.goodsPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getActualPrice() != null) {
            sql.SET("actual_price = #{record.actualPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsSpecifitionNameValue() != null) {
            sql.SET("goods_specifition_name_value = #{record.goodsSpecifitionNameValue,jdbcType=LONGVARCHAR}");
        }
        
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String updateByExampleWithBLOBs(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_order_goods");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("order_id = #{record.orderId,jdbcType=VARCHAR}");
        sql.SET("goods_id = #{record.goodsId,jdbcType=VARCHAR}");
        sql.SET("goods_name = #{record.goodsName,jdbcType=VARCHAR}");
        sql.SET("goods_sn = #{record.goodsSn,jdbcType=VARCHAR}");
        sql.SET("product_id = #{record.productId,jdbcType=VARCHAR}");
        sql.SET("number = #{record.number,jdbcType=INTEGER}");
        sql.SET("market_price = #{record.marketPrice,jdbcType=DECIMAL}");
        sql.SET("retail_price = #{record.retailPrice,jdbcType=DECIMAL}");
        sql.SET("is_real = #{record.isReal,jdbcType=BIT}");
        sql.SET("goods_specifition_ids = #{record.goodsSpecifitionIds,jdbcType=VARCHAR}");
        sql.SET("list_pic_url = #{record.listPicUrl,jdbcType=VARCHAR}");
        sql.SET("brand_id = #{record.brandId,jdbcType=INTEGER}");
        sql.SET("customers = #{record.customers,jdbcType=VARCHAR}");
        sql.SET("customers_name = #{record.customersName,jdbcType=VARCHAR}");
        sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        sql.SET("province = #{record.province,jdbcType=VARCHAR}");
        sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        sql.SET("district = #{record.district,jdbcType=VARCHAR}");
        sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        sql.SET("mobile = #{record.mobile,jdbcType=VARCHAR}");
        sql.SET("consignee = #{record.consignee,jdbcType=VARCHAR}");
        sql.SET("shipping_id = #{record.shippingId,jdbcType=TINYINT}");
        sql.SET("shipping_name = #{record.shippingName,jdbcType=VARCHAR}");
        sql.SET("shipping_no = #{record.shippingNo,jdbcType=VARCHAR}");
        sql.SET("shipping_status = #{record.shippingStatus,jdbcType=INTEGER}");
        sql.SET("order_price = #{record.orderPrice,jdbcType=DECIMAL}");
        sql.SET("goods_price = #{record.goodsPrice,jdbcType=DECIMAL}");
        sql.SET("actual_price = #{record.actualPrice,jdbcType=DECIMAL}");
        sql.SET("goods_specifition_name_value = #{record.goodsSpecifitionNameValue,jdbcType=LONGVARCHAR}");
        
        OrderGoodsCriteria example = (OrderGoodsCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String updateByExample(Map<String, Object> parameter) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_order_goods");
        
        sql.SET("id = #{record.id,jdbcType=INTEGER}");
        sql.SET("order_id = #{record.orderId,jdbcType=VARCHAR}");
        sql.SET("goods_id = #{record.goodsId,jdbcType=VARCHAR}");
        sql.SET("goods_name = #{record.goodsName,jdbcType=VARCHAR}");
        sql.SET("goods_sn = #{record.goodsSn,jdbcType=VARCHAR}");
        sql.SET("product_id = #{record.productId,jdbcType=VARCHAR}");
        sql.SET("number = #{record.number,jdbcType=INTEGER}");
        sql.SET("market_price = #{record.marketPrice,jdbcType=DECIMAL}");
        sql.SET("retail_price = #{record.retailPrice,jdbcType=DECIMAL}");
        sql.SET("is_real = #{record.isReal,jdbcType=BIT}");
        sql.SET("goods_specifition_ids = #{record.goodsSpecifitionIds,jdbcType=VARCHAR}");
        sql.SET("list_pic_url = #{record.listPicUrl,jdbcType=VARCHAR}");
        sql.SET("brand_id = #{record.brandId,jdbcType=INTEGER}");
        sql.SET("customers = #{record.customers,jdbcType=VARCHAR}");
        sql.SET("customers_name = #{record.customersName,jdbcType=VARCHAR}");
        sql.SET("country = #{record.country,jdbcType=VARCHAR}");
        sql.SET("province = #{record.province,jdbcType=VARCHAR}");
        sql.SET("city = #{record.city,jdbcType=VARCHAR}");
        sql.SET("district = #{record.district,jdbcType=VARCHAR}");
        sql.SET("address = #{record.address,jdbcType=VARCHAR}");
        sql.SET("mobile = #{record.mobile,jdbcType=VARCHAR}");
        sql.SET("consignee = #{record.consignee,jdbcType=VARCHAR}");
        sql.SET("shipping_id = #{record.shippingId,jdbcType=TINYINT}");
        sql.SET("shipping_name = #{record.shippingName,jdbcType=VARCHAR}");
        sql.SET("shipping_no = #{record.shippingNo,jdbcType=VARCHAR}");
        sql.SET("shipping_status = #{record.shippingStatus,jdbcType=INTEGER}");
        sql.SET("order_price = #{record.orderPrice,jdbcType=DECIMAL}");
        sql.SET("goods_price = #{record.goodsPrice,jdbcType=DECIMAL}");
        sql.SET("actual_price = #{record.actualPrice,jdbcType=DECIMAL}");
        
        OrderGoodsCriteria example = (OrderGoodsCriteria) parameter.get("example");
        applyWhere(sql, example, true);
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    public String updateByPrimaryKeySelective(OrderGoods record) {
        SQL sql = new SQL();
        sql.UPDATE("twshop_order_goods");
        
        if (record.getOrderId() != null) {
            sql.SET("order_id = #{orderId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsId() != null) {
            sql.SET("goods_id = #{goodsId,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsName() != null) {
            sql.SET("goods_name = #{goodsName,jdbcType=VARCHAR}");
        }
        
        if (record.getGoodsSn() != null) {
            sql.SET("goods_sn = #{goodsSn,jdbcType=VARCHAR}");
        }
        
        if (record.getProductId() != null) {
            sql.SET("product_id = #{productId,jdbcType=VARCHAR}");
        }
        
        if (record.getNumber() != null) {
            sql.SET("number = #{number,jdbcType=INTEGER}");
        }
        
        if (record.getMarketPrice() != null) {
            sql.SET("market_price = #{marketPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getRetailPrice() != null) {
            sql.SET("retail_price = #{retailPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getIsReal() != null) {
            sql.SET("is_real = #{isReal,jdbcType=BIT}");
        }
        
        if (record.getGoodsSpecifitionIds() != null) {
            sql.SET("goods_specifition_ids = #{goodsSpecifitionIds,jdbcType=VARCHAR}");
        }
        
        if (record.getListPicUrl() != null) {
            sql.SET("list_pic_url = #{listPicUrl,jdbcType=VARCHAR}");
        }
        
        if (record.getBrandId() != null) {
            sql.SET("brand_id = #{brandId,jdbcType=INTEGER}");
        }
        
        if (record.getCustomers() != null) {
            sql.SET("customers = #{customers,jdbcType=VARCHAR}");
        }
        
        if (record.getCustomersName() != null) {
            sql.SET("customers_name = #{customersName,jdbcType=VARCHAR}");
        }
        
        if (record.getCountry() != null) {
            sql.SET("country = #{country,jdbcType=VARCHAR}");
        }
        
        if (record.getProvince() != null) {
            sql.SET("province = #{province,jdbcType=VARCHAR}");
        }
        
        if (record.getCity() != null) {
            sql.SET("city = #{city,jdbcType=VARCHAR}");
        }
        
        if (record.getDistrict() != null) {
            sql.SET("district = #{district,jdbcType=VARCHAR}");
        }
        
        if (record.getAddress() != null) {
            sql.SET("address = #{address,jdbcType=VARCHAR}");
        }
        
        if (record.getMobile() != null) {
            sql.SET("mobile = #{mobile,jdbcType=VARCHAR}");
        }
        
        if (record.getConsignee() != null) {
            sql.SET("consignee = #{consignee,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingId() != null) {
            sql.SET("shipping_id = #{shippingId,jdbcType=TINYINT}");
        }
        
        if (record.getShippingName() != null) {
            sql.SET("shipping_name = #{shippingName,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingNo() != null) {
            sql.SET("shipping_no = #{shippingNo,jdbcType=VARCHAR}");
        }
        
        if (record.getShippingStatus() != null) {
            sql.SET("shipping_status = #{shippingStatus,jdbcType=INTEGER}");
        }
        
        if (record.getOrderPrice() != null) {
            sql.SET("order_price = #{orderPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsPrice() != null) {
            sql.SET("goods_price = #{goodsPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getActualPrice() != null) {
            sql.SET("actual_price = #{actualPrice,jdbcType=DECIMAL}");
        }
        
        if (record.getGoodsSpecifitionNameValue() != null) {
            sql.SET("goods_specifition_name_value = #{goodsSpecifitionNameValue,jdbcType=LONGVARCHAR}");
        }
        
        sql.WHERE("id = #{id,jdbcType=INTEGER}");
        
        return sql.toString();
    }

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table twshop_order_goods
     *
     * @mbg.generated
     */
    protected void applyWhere(SQL sql, OrderGoodsCriteria example, boolean includeExamplePhrase) {
        if (example == null) {
            return;
        }
        
        String parmPhrase1;
        String parmPhrase1_th;
        String parmPhrase2;
        String parmPhrase2_th;
        String parmPhrase3;
        String parmPhrase3_th;
        if (includeExamplePhrase) {
            parmPhrase1 = "%s #{example.oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{example.oredCriteria[%d].allCriteria[%d].value} and #{example.oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{example.oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{example.oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{example.oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{example.oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        } else {
            parmPhrase1 = "%s #{oredCriteria[%d].allCriteria[%d].value}";
            parmPhrase1_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s}";
            parmPhrase2 = "%s #{oredCriteria[%d].allCriteria[%d].value} and #{oredCriteria[%d].criteria[%d].secondValue}";
            parmPhrase2_th = "%s #{oredCriteria[%d].allCriteria[%d].value,typeHandler=%s} and #{oredCriteria[%d].criteria[%d].secondValue,typeHandler=%s}";
            parmPhrase3 = "#{oredCriteria[%d].allCriteria[%d].value[%d]}";
            parmPhrase3_th = "#{oredCriteria[%d].allCriteria[%d].value[%d],typeHandler=%s}";
        }
        
        StringBuilder sb = new StringBuilder();
        List<Criteria> oredCriteria = example.getOredCriteria();
        boolean firstCriteria = true;
        for (int i = 0; i < oredCriteria.size(); i++) {
            Criteria criteria = oredCriteria.get(i);
            if (criteria.isValid()) {
                if (firstCriteria) {
                    firstCriteria = false;
                } else {
                    sb.append(" or ");
                }
                
                sb.append('(');
                List<Criterion> criterions = criteria.getAllCriteria();
                boolean firstCriterion = true;
                for (int j = 0; j < criterions.size(); j++) {
                    Criterion criterion = criterions.get(j);
                    if (firstCriterion) {
                        firstCriterion = false;
                    } else {
                        sb.append(" and ");
                    }
                    
                    if (criterion.isNoValue()) {
                        sb.append(criterion.getCondition());
                    } else if (criterion.isSingleValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase1, criterion.getCondition(), i, j));
                        } else {
                            sb.append(String.format(parmPhrase1_th, criterion.getCondition(), i, j,criterion.getTypeHandler()));
                        }
                    } else if (criterion.isBetweenValue()) {
                        if (criterion.getTypeHandler() == null) {
                            sb.append(String.format(parmPhrase2, criterion.getCondition(), i, j, i, j));
                        } else {
                            sb.append(String.format(parmPhrase2_th, criterion.getCondition(), i, j, criterion.getTypeHandler(), i, j, criterion.getTypeHandler()));
                        }
                    } else if (criterion.isListValue()) {
                        sb.append(criterion.getCondition());
                        sb.append(" (");
                        List<?> listItems = (List<?>) criterion.getValue();
                        boolean comma = false;
                        for (int k = 0; k < listItems.size(); k++) {
                            if (comma) {
                                sb.append(", ");
                            } else {
                                comma = true;
                            }
                            if (criterion.getTypeHandler() == null) {
                                sb.append(String.format(parmPhrase3, i, j, k));
                            } else {
                                sb.append(String.format(parmPhrase3_th, i, j, k, criterion.getTypeHandler()));
                            }
                        }
                        sb.append(')');
                    }
                }
                sb.append(')');
            }
        }
        
        if (sb.length() > 0) {
            sql.WHERE(sb.toString());
        }
    }
}